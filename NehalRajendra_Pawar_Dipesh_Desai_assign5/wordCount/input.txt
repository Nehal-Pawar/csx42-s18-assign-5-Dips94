a b c c a


dd dad
asdas
adsas
dsd
s
s
s
d
d
d
gffdfsd
dsfsdf

sdf sdf dsf  f  g g sdfsdf  sfddsa b c c a

Assignment 5
Due date
11.59 PM EST, August 3rd

Submit your code as per the provided instructions.
Git
https://classroom.github.com/a/YpYcF8-B
Updates
Mon Jul 23 14:28:20 EDT 2018: Assignment posted
Sat Jul 28 18:41:47 EDT 2018: changed "unique" to "distinct"
build.xml moved into src/
added debug value to list of command line arguments
Team
You can work in teams of 2 students each.
Assignment Goal
Using design patterns with trees.
You are required to use ANT for the following:
Compiling the code
running the code
Generating a tarball for submission
Your code should compile and run on remote.cs.binghamton.edu or bingsuns or the debian-pods in the Computer Science lab in the Engineering Building.
Project Description
Fast Tree Functions
Design an develop the following 2 software functionalities:
A module that reads an input file, input.txt, and populates a tree data structure with all the words in the file. Use the tree data structure that will maximize performance for the second module. Store the words in the tree using the insert criteria for that tree data structure.
A module that counts the number of words, number of unique distinct words, and number of characters in the tree and stores it in a file named output.txt.
The words from the input file should be stored/inserted in the tree using the tree property. So, if you use a BST, then you need to check newWord < currentNodeWord, etc.
Consider the words to be case sensitive.
It is acceptable to use data structure(s) within each tree node to store information about that node's content. However, you cannot use a separate data structure to keep track of the entire tree's data.
Use at least one design pattern for this a
vjh
ssignment, and justify its usage in the README.md file.
In the driver code, call the two modules and test the performance in the following manner:
long startTime = System.currentTimeMillis();

  Start of loop N times
     declare/instantiate the tree and modules (including opening the file)
     code to call first module 
     code to visit with the second module
     code to close the file
  End of loop N times

long finishTime = System.currentTimeMillis();
Calculate total_time as (finishTime-startTime)/NUM_ITERATIONS.
Write the total_time value to stdout

Use any whitespace as the criteria to delimit words.
The following should be read from command line: input file name, output file name, value of NUM_ITERATIONS, and debug value.
Use the MyLogger class from the previous assignment along with your own debug scheme.
Design Requirements
Same as previous assignments, except that javadoc is now optional.
Code Organization
Your directory structure should be the following:
-lastName_firstName_ lastName_firstName_assign5
   ---wordCount
     ----- README.md
     ----- src
       ----- build.xml
       ---wordCount
     	   ----------driver
	        	   ----------Drivercssc
sx
				    [Not necessarily in this order]
				    (1) Validate that command line inputs for input and output file names.
			   	    (2) Create the element(s)
			            (3) Create the two module instances
				    (4) Use the performance measurement loop given above.

			 
           ----------util
	              ----------FileProcessor 
			  [methods to read a line and write to a file]
           ----------treesForStrings
	              ----------...
			  [Classes for Tree data structures, if you define your own]
           ----------modules [replace modules/module-1/module-2 with meaningful names]
	              ----------module1
			  [code that that reads words from a file and populates a tree data structure]
	              ----------module2
			  [code that determines the total number of words, number of distinct words, and total number of characters in the tree]
           ----------other packages that you need

Code Templates
None provided for this assignment.
Submission
Same as Assignment-1.
Both the team members should submit to MyCourses separately.
If you work in a team, you should name your top level folder as firstName_lastName_firstName_lastName
Late Submissions
The policy for late submissions is that you will lose 10% of the grade for each day that your submission is delayed.
Grading Guidelines
Grading Guidelines.
mgovinda at cs dot binghamton dot edu
Back to Design Patterns
dd dad
asdas
adsas
dsd
s
s
s
d
d
d
gffdfsd
dsfsdf

sdf sdf dsf  f  g g sdfsdf  sfddsa b c c a


dd dad
asdas
adsas
dsd
s
s
s
d
d
d
gffdfsd
dsfsdf

sdf sdf dsf  f  g g sdfsdf  sfdds
